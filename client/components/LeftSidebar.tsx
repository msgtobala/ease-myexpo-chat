import React from "react";
import { useNavigate } from "react-router-dom";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/contexts/AuthContext";
import { doc, getDoc } from 'firebase/firestore';
import { db } from '@/lib/firebase';

interface LeftSidebarProps {
  activeItem?: string;
  onItemClick?: (item: string) => void;
}

export default function LeftSidebar({
  activeItem = "discussions",
  onItemClick,
}: LeftSidebarProps) {
  const navigate = useNavigate();
  const { toast } = useToast();
  const { user } = useAuth();

  const handleItemClick = async (item: string) => {
    if (onItemClick) {
      onItemClick(item);
    }

    // Navigate to appropriate route
    switch (item) {
      case "discussions":
        navigate("/home");
        break;
      case "smart-match":
        navigate("/smart-match");
        break;
      case "popular":
      case "communities":
        // Show coming soon toast
        toast({
          title: "Coming Soon",
          description: "This feature will be available soon!",
          duration: 3000,
        });
        break;
      case "settings":
        // Fetch user data and navigate to appropriate profile
        if (user) {
          try {
            const userDoc = await getDoc(doc(db, "users", user.uid));
            if (userDoc.exists()) {
              const userData = userDoc.data();
              if (userData.profileType === "visitor") {
                navigate("/visitor/profile", { state: { userData } });
              } else if (userData.profileType === "exhibitor") {
                navigate("/exhibitor/profile", { state: { userData } });
              }
            }
          } catch (error) {
            console.error("Error fetching user data:", error);
            toast({
              title: "Error",
              description: "Could not load profile. Please try again.",
              duration: 3000,
            });
          }
        }
        break;
    }
  };

  // Define navigation items in the desired order
  const navigationItems = [
    {
      id: "discussions",
      icon: (
        <svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M20.3027 8.511C21.1867 8.795 21.8027 9.639 21.8027 10.608V14.894C21.8027 16.03 20.9557 16.994 19.8227 17.087C19.4827 17.114 19.1427 17.139 18.8027 17.159V20.25L15.8027 17.25C14.4487 17.25 13.1087 17.195 11.7827 17.087C11.4941 17.0637 11.2133 16.9813 10.9577 16.845M20.3027 8.511C20.1482 8.46127 19.9885 8.42939 19.8267 8.416C17.1487 8.19368 14.4568 8.19368 11.7787 8.416C10.6477 8.51 9.80273 9.473 9.80273 10.608V14.894C9.80273 15.731 10.2627 16.474 10.9577 16.845M20.3027 8.511V6.637C20.3027 5.016 19.1507 3.611 17.5427 3.402C15.4736 3.13379 13.3892 2.99951 11.3027 3C9.18773 3 7.10473 3.137 5.06273 3.402C3.45473 3.611 2.30273 5.016 2.30273 6.637V12.863C2.30273 14.484 3.45473 15.889 5.06273 16.098C5.63973 16.173 6.21973 16.238 6.80273 16.292V21L10.9577 16.845" stroke={activeItem === "discussions" ? "#10B981" : "#666666"} strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
        </svg>
      ),
      label: "Discussions"
    },
    {
      id: "smart-match",
      icon: (
        <svg width="22" height="22" viewBox="0 0 22 22" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M8.99525 14.5787L8.25 17.1875L7.50475 14.5787C7.31213 13.9048 6.95099 13.2911 6.4554 12.7955C5.95982 12.2999 5.34613 11.9388 4.67225 11.7462L2.0625 11L4.67133 10.2548C5.34521 10.0621 5.9589 9.70099 6.45449 9.2054C6.95007 8.70982 7.31122 8.09613 7.50383 7.42225L8.25 4.8125L8.99525 7.42133C9.18787 8.09521 9.54901 8.7089 10.0446 9.20449C10.5402 9.70007 11.1539 10.0612 11.8278 10.2538L14.4375 11L11.8287 11.7452C11.1548 11.9379 10.5411 12.299 10.0455 12.7946C9.54993 13.2902 9.18878 13.9039 8.99617 14.5778L8.99525 14.5787ZM16.7374 7.98875L16.5 8.9375L16.2626 7.98875C16.1267 7.44479 15.8455 6.94799 15.4491 6.55144C15.0528 6.1549 14.5561 5.87353 14.0122 5.73742L13.0625 5.5L14.0122 5.26258C14.5561 5.12647 15.0528 4.8451 15.4491 4.44856C15.8455 4.05201 16.1267 3.55521 16.2626 3.01125L16.5 2.0625L16.7374 3.01125C16.8734 3.55532 17.1547 4.05221 17.5512 4.44876C17.9478 4.84531 18.4447 5.12661 18.9888 5.26258L19.9375 5.5L18.9888 5.73742C18.4447 5.87339 17.9478 6.15469 17.5512 6.55124C17.1547 6.94779 16.8734 7.44468 16.7374 7.98875ZM15.4862 18.8531L15.125 19.9375L14.7638 18.8531C14.6626 18.5493 14.492 18.2733 14.2656 18.0469C14.0392 17.8205 13.7632 17.6499 13.4594 17.5487L12.375 17.1875L13.4594 16.8263C13.7632 16.7251 14.0392 16.5545 14.2656 16.3281C14.492 16.1017 14.6626 15.8257 14.7638 15.5219L15.125 14.4375L15.4862 15.5219C15.5874 15.8257 15.758 16.1017 15.9844 16.3281C16.2108 16.5545 16.4868 16.7251 16.7906 16.8263L17.875 17.1875L16.7906 17.5487C16.4868 17.6499 16.2108 17.8205 15.9844 18.0469C15.758 18.2733 15.5874 18.5493 15.4862 18.8531Z" stroke={activeItem === "smart-match" ? "#10B981" : "#666666"} strokeWidth="1.375" strokeLinecap="round" strokeLinejoin="round"/>
        </svg>
      ),
      label: "Smart Match"
    },
    {
      id: "popular",
      icon: (
        <svg width="22" height="24" viewBox="0 0 22 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M2.30273 18L9.05273 11.25L13.3587 15.556C14.6037 13.1022 16.6573 11.1531 19.1727 10.038L21.9127 8.818M21.9127 8.818L15.9727 6.537M21.9127 8.818L19.6327 14.758" stroke={activeItem === "popular" ? "#10B981" : "#666666"} strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
        </svg>
      ),
      label: "Popular"
    },
    {
      id: "communities",
      icon: (
        <svg width="22" height="24" viewBox="0 0 22 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M17.1117 15.521C17.5795 15.2015 18.1282 15.0211 18.6943 15.0004C19.2604 14.9798 19.8207 15.1199 20.3106 15.4044C20.8004 15.689 21.1996 16.1064 21.4621 16.6084C21.7245 17.1104 21.8395 17.6764 21.7937 18.241C20.5939 18.6603 19.3195 18.8235 18.0527 18.72C18.0488 17.5866 17.7225 16.4768 17.1117 15.522C16.5696 14.6718 15.8219 13.972 14.9376 13.4875C14.0533 13.003 13.0611 12.7493 12.0527 12.75C11.0446 12.7495 10.0526 13.0032 9.16846 13.4877C8.28437 13.9723 7.53674 14.6719 6.99473 15.522M18.0517 18.719L18.0527 18.75C18.0527 18.975 18.0407 19.197 18.0157 19.416C16.2011 20.4571 14.1448 21.0033 12.0527 21C9.88273 21 7.84574 20.424 6.08974 19.416C6.06403 19.1846 6.05167 18.9519 6.05273 18.719M6.05273 18.719C4.78636 18.8263 3.51264 18.6637 2.31373 18.242C2.26809 17.6776 2.38313 17.1117 2.64556 16.6099C2.908 16.1081 3.3071 15.6908 3.79674 15.4063C4.28637 15.1218 4.84653 14.9817 5.41245 15.0021C5.97838 15.0226 6.52695 15.2028 6.99473 15.522M6.05273 18.719C6.05633 17.5857 6.38436 16.4769 6.99473 15.522M15.0527 6.75C15.0527 7.54565 14.7367 8.30871 14.1741 8.87132C13.6114 9.43393 12.8484 9.75 12.0527 9.75C11.2571 9.75 10.494 9.43393 9.93141 8.87132C9.3688 8.30871 9.05273 7.54565 9.05273 6.75C9.05273 5.95435 9.3688 5.19129 9.93141 4.62868C10.494 4.06607 11.2571 3.75 12.0527 3.75C12.8484 3.75 13.6114 4.06607 14.1741 4.62868C14.7367 5.19129 15.0527 5.95435 15.0527 6.75ZM21.0527 9.75C21.0527 10.0455 20.9945 10.3381 20.8815 10.611C20.7684 10.884 20.6027 11.1321 20.3937 11.341C20.1848 11.5499 19.9368 11.7157 19.6638 11.8287C19.3908 11.9418 19.0982 12 18.8027 12C18.5073 12 18.2147 11.9418 17.9417 11.8287C17.6687 11.7157 17.4207 11.5499 17.2117 11.341C17.0028 11.1321 16.8371 10.884 16.724 10.611C16.6109 10.3381 16.5527 10.0455 16.5527 9.75C16.5527 9.15326 16.7898 8.58097 17.2117 8.15901C17.6337 7.73705 18.206 7.5 18.8027 7.5C19.3995 7.5 19.9718 7.73705 20.3937 8.15901C20.8157 8.58097 21.0527 9.15326 21.0527 9.75ZM7.55273 9.75C7.55273 10.0455 7.49454 10.3381 7.38146 10.6..." stroke={activeItem === "communities" ? "#10B981" : "#666666"} strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
        </svg>
      ),
      label: "Communities"
    },
    {
      id: "settings",
      icon: (
        <svg width="22" height="23" viewBox="0 0 22 23" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M11.5648 1.91666C12.2147 1.91638 12.8371 2.18558 13.2901 2.66292C13.7431 3.14026 13.9882 3.7851 13.9685 4.38691L13.9763 4.52845C13.9921 4.66783 14.0364 4.80235 14.1082 4.92635C14.2482 5.17084 14.4774 5.34827 14.7452 5.4195C15.013 5.49073 15.2975 5.44991 15.567 5.28844L15.7171 5.20901C16.8446 4.66609 18.1969 5.09754 18.8222 6.2093L19.3843 7.20832C19.3991 7.23466 19.4122 7.26187 19.4234 7.28979L19.4756 7.39681C19.9783 8.4958 19.6206 9.80304 18.6656 10.4672L18.4297 10.619C18.3064 10.707 18.2036 10.822 18.1263 10.9602C17.9867 11.2057 17.9484 11.498 18.0198 11.7725C18.0913 12.047 18.2666 12.281 18.5326 12.4385L18.6857 12.5389C19.148 12.8701 19.4819 13.3583 19.6276 13.9179C19.7919 14.5491 19.7038 15.2215 19.3782 15.7937L18.7736 16.8255L18.6824 16.971C17.972 18.0174 16.5926 18.3371 15.54 17.7147L15.4152 17.6489C15.2851 17.5893 15.1447 17.5565 15.0168 17.5529C14.7387 17.5515 14.4716 17.664 14.275 17.8655C14.0784 18.0669 13.9685 18.3404 13.9692 18.6585L13.9618 18.823C13.86 20.0965 12.8191 21.0833 11.565 21.0833H10.4326C9.10452 21.0833 8.02785 19.9805 8.0292 18.6639L8.02142 18.5223C8.0056 18.3829 7.96129 18.2484 7.88581 18.118C7.74891 17.8729 7.52209 17.6939 7.25577 17.6209C6.98945 17.5479 6.70569 17.5869 6.43102 17.7496L6.26782 17.8331C5.75172 18.0708 5.16957 18.1147 4.62409 17.9559C4.00865 17.7768 3.48828 17.3538 3.18462 16.7923L2.6004 15.759L2.52264 15.6059C1.99061 14.4556 2.40764 13.0728 3.46606 12.4463L3.56259 12.3844C3.84534 12.1839 4.01488 11.8534 4.01488 11.5C4.01488 11.1157 3.8147 10.7605 3.46453 10.5527L3.32245 10.4593C2.30085 9.73164 1.98871 8.31879 2.62158 7.19416L3.21675 6.19241C3.87868 5.01568 5.3456 4.60973 6.47383 5.27246L6.59596 5.33915C6.72047 5.39768 6.85571 5.42875 6.98593 5.43018C7.56014 5.43024 8.02795 4.95795 8.03664 4.35256L8.04444 4.16664C8.09146 3.59102 8.33532 3.05008 8.73397 2.63979C9.18373 2.17689 9.79505 1.91666 10.4326 1.91666H11.5648ZM11.565 3.30407H10.4326C10.1554 3.30407 9.88961 3.41722 9.69406 3.61849C9.52074 3.79687 9.4..." stroke={activeItem === "settings" ? "#10B981" : "#666666"} fill="none"/>
        </svg>
      ),
      label: "Settings"
    }
  ];

  return (
    <div className="w-full h-[265px] bg-[#FCFDFD] rounded-[16px] p-4 lg:p-6 relative">
      {/* Navigation Items */}
      <div className="flex flex-col gap-4 lg:gap-6">
        {navigationItems.map((item) => (
          <div
            key={item.id}
            className="flex items-center gap-4 cursor-pointer"
            onClick={() => handleItemClick(item.id)}
          >
            {item.icon}
            <span
              className={`text-[16px] font-normal ${
                activeItem === item.id ? "text-[#10B981]" : "text-[#666666]"
              }`}
            >
              {item.label}
            </span>
          </div>
        ))}
      </div>
    </div>
  );
}